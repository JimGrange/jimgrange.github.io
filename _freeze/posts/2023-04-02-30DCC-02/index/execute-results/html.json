{
  "hash": "641246ccc5824447dc17efbbf68c0298",
  "result": {
    "markdown": "---\ntitle: \"30-DCC day 2\"\ndescription: \"Waffle plots\"\nimage: \"feature.png\"\ncomments:\n  giscus:\n    repo: \"JimGrange/jimgrange.github.io\"\n    mapping: \"title\"\ndate: 2023-04-02\ncategories: [R, \"30DCC\"] # self-defined categories\n# citation: \n#   url: https://jimgrange.github.io/posts/2023-03-30-hello-world/\n# image: preview_image.jpg\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nI blame Richard Mcelreath for introducing me to Waffle House. I've never met him and I've never been to Waffle House, but every time I hear \"waffle\" I think of [his brilliant lecture that featured waffle houses being potentially blamed for high divorce rates in the USA](https://www.youtube.com/watch?v=UpP-_mBvECI&list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&index=6) (States with high divorce rate also have higher numbers of Waffle Houses. Of course, the link is not causal...)\n\nSo when today's plotting theme was \"waffle\", I had to do something with Waffle Houses. A basic idea was to construct a waffle plot showing the frequency of Waffle House locations in the USA. I tried lots of places to get at the location data for Waffle Houses, and any attempt to find a database of locations I could download was met with a rather ridiculous fee (minimum of \\$60!). In the end I found some fractional data from [this Huffington Post post](https://www.huffpost.com/entry/waffle-house-locations_b_5332044). So, we will go with this.\n\n![](02-waffle-locations.jpg)\n\nIt only provdes the data from the top 21 locations, so this is what we will use. Let's get it into R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwaffle_raw_data <- tibble(\n  location = c(\"Atlanta\", \"Cartesville\", \"Greenville\", \"Athens\", \"Fort Worth\", \n               \"Nashville\", \"Griffin\", \"Commerce\", \"Mobile\", \"Louisville\", \n               \"Dallas\", \"Macon\", \"Bay Minette\", \"Charlotte\", \"Aiken\", \"Jackson\", \n               \"Raleigh\", \"Little Rock\", \"Gulfport\", \"Biloxi\", \"Pensacola\"), \n  number = c(132, 45, 34, 29, 25, 24, 23, 20, 20, 18, 18, \n             18, 18, 17, 17, 17, 16, 16, 16, 16, 16)\n) %>% \n  mutate(location = as_factor(location))\nwaffle_raw_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 21 × 2\n   location    number\n   <fct>        <dbl>\n 1 Atlanta        132\n 2 Cartesville     45\n 3 Greenville      34\n 4 Athens          29\n 5 Fort Worth      25\n 6 Nashville       24\n 7 Griffin         23\n 8 Commerce        20\n 9 Mobile          20\n10 Louisville      18\n# ℹ 11 more rows\n```\n:::\n:::\n\n\nTo do a waffle plot, we need a `tibble` where each location is repeated *n* times, where *n* comes from the number column. We can do this using the `uncount()` function in the `tidyr` package (comes installed with the `tidyverse`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwaffle_data <- waffle_raw_data %>%\n  uncount(weights = number, .remove = FALSE) \nwaffle_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 555 × 2\n   location number\n   <fct>     <dbl>\n 1 Atlanta     132\n 2 Atlanta     132\n 3 Atlanta     132\n 4 Atlanta     132\n 5 Atlanta     132\n 6 Atlanta     132\n 7 Atlanta     132\n 8 Atlanta     132\n 9 Atlanta     132\n10 Atlanta     132\n# ℹ 545 more rows\n```\n:::\n:::\n\n\nOnce we have this, we can use the `ggwaffle` package ([link here](https://github.com/liamgilbey/ggwaffle/)). It uses the wonderfully titled `waffle_iron()` function to get the data into the right shape for the waffle plot. Or, to put it in the words of the package help file:\n\n> Pour your data into a waffle iron to get ready to cook a waffle chart.\n\nLovely stuff.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# devtools::install_github(\"liamgilbey/ggwaffle\")\nlibrary(ggwaffle)\n\nwaffle_plot_data <- waffle_data %>% \n  waffle_iron(aes_d(group = location)) %>% \n  as_tibble()\nwaffle_plot_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 555 × 3\n       y     x group  \n   <int> <int> <fct>  \n 1     1     1 Atlanta\n 2     2     1 Atlanta\n 3     3     1 Atlanta\n 4     4     1 Atlanta\n 5     5     1 Atlanta\n 6     6     1 Atlanta\n 7     7     1 Atlanta\n 8     8     1 Atlanta\n 9     1     2 Atlanta\n10     2     2 Atlanta\n# ℹ 545 more rows\n```\n:::\n:::\n\n\nThis has added the appropriate x- and y-coordinates for each \"data point\" that will serve as a hole in our waffle plot. We can now pass this data to `ggplot2` with a standard ggplot call establishing the x- and y-axes, but then adding a call to `geom_waffle()` from the `ggwaffle` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwaffle_plot_data %>% \n  ggplot(aes(x = x, y = y, fill = group)) + \n  geom_waffle()\n```\n:::\n\n\n![](02-plot1.png)\n\nA decent start, but the data points don't look great as they are stretched; ideally they should be symetrical. You can do this by adding `coord_equal()` to the ggplot calls.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwaffle_plot_data %>%\n  ggplot(aes(x = x, y = y, fill = group)) + \n  geom_waffle() +\n  coord_equal()\n```\n:::\n\n\n![](02-plot2.png)\n\nOK, but now the plot is way too small. I spent **absolutely ages** trying to work out how to remove all of the white space from around the plot. One solution I was looking for was manually changing the number of rows and columns in the waffle plot. In the end---and don't ask me why it took me so long to check here---I found the [following issue in the GitHub repository for the `ggwaffle` package](https://github.com/liamgilbey/ggwaffle/issues/12), which suggested that I needed to look at the `waffle_iron()` function rather than the `geom_waffle()` call. As it turns out, I just add `rows = 20` to the `waffle_iron()` call and then pass this new data to the plotting functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwaffle_raw_data %>%\n  uncount(weights = number, .remove = FALSE) %>% \n  waffle_iron(aes_d(group = location), \n              rows = 20) %>% \n  ggplot(aes(x = x, y = y, fill = group)) + \n  geom_waffle() +\n  coord_equal()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nOK, finally we're getting somewhere! Let's tidy this up a bit by removing the x- and y-axes and their labels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwaffle_raw_data %>%\n  uncount(weights = number, .remove = FALSE) %>% \n  waffle_iron(aes_d(group = location), \n              rows = 20) %>% \n  ggplot(aes(x = x, y = y, fill = group)) + \n  geom_waffle() +\n  coord_equal() + \n  theme_void() + \n  labs(fill = NULL) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nYou can change the squares to circles on a waffle plot by using `geom_waflle(tile_shape = \"circle\")`, but need to change the colouring to `colour` rather than `fill` in the ggplot `aes()` call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwaffle_raw_data %>%\n  uncount(weights = number, .remove = FALSE) %>% \n  waffle_iron(aes_d(group = location), \n              rows = 20) %>% \n  ggplot(aes(x = x, y = y, colour = group)) + \n  geom_waffle(tile_shape = \"circle\", size = 4) +\n  coord_equal() + \n  theme_void() + \n  labs(colour = NULL) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nLet's just add a title and we're probably done. Initial attempts showed the title was too small and left-aligned too extremely. So I had to invoke a series of `theme(plot.)` function calls to get it right\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwaffle_raw_data %>%\n  uncount(weights = number, .remove = FALSE) %>% \n  waffle_iron(aes_d(group = location), \n              rows = 20) %>% \n  ggplot(aes(x = x, y = y, colour = group)) + \n  geom_waffle(tile_shape = \"circle\", size = 4) +\n  coord_equal() + \n  theme_void() + \n  labs(colour = NULL, \n       title = \"Top Waffle House Locations in the USA\") +\n  theme(plot.title = element_text(hjust = 0.5, \n                                  size = 16, \n                                  face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}